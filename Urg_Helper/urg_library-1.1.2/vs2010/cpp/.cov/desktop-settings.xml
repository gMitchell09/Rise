<!-- (c) 2011-2013 Coverity, Inc. All rights reserved worldwide. -->
<desktopSettings>
	<!-- shared location of analysis tools -->	
	<!-- Example: <sharedAnalysisLocation windowsPath="c:\Program Files\Coverity\Static Analysis\bin" 
		unixPath="/opt/Coverity/Static Analysis/bin"/> -->
	<sharedAnalysisLocation windowsPath="" unixPath=""/>

	<!-- shared location of Coverity license file -->
	<!-- Example: <sharedLicenseLocation windowsPath="c:\Program Files\Coverity\Static Analysis\bin\license.dat" 
		unixPath="/opt/Coverity/Static Analysis/bin/license.dat"/> -->
	<sharedLicenseLocation windowsPath="" unixPath=""/>

	<!-- shared location of SA configuration file -->
	<!-- Example: <sharedConfigLocation windowsPath="c:\Program Files\Coverity\Static Analysis\shared-configs\coverity-config.xml" 
		unixPath="/opt/Coverity/Static Analysis/shared-configs/coverity-config.xml"/> -->
	<sharedConfigLocation windowsPath="" unixPath=""/>

	<!-- shared custom extend checkers binaries directory location -->
	<!-- Example: <sharedSDKCheckersLocation windowsPath="c:\Program Files\SDK_checkers" 
		unixPath="/opt/sdk_checkers"/> -->
	<sharedSDKCheckersLocation windowsPath="" unixPath=""/>

        <!-- shared location of cov-build intermediate directory 
           Environment variables can be used as part of the path, e.g. ${env_var:SOME_VARIABLE} -->
	<!-- Example: <sharedIntermediateLocation windowsPath="T:\intermediate_dirs" 
		unixPath="/opt/intermediate_dirs"/> -->
	<sharedIntermediateLocation windowsPath="" unixPath=""/>

	<!-- project name for private developer streams without central project association -->
	<devProject>Developer Streams</devProject>

	<!-- Name pattern for projects for developer streams with central project association.
		%s will be replaced with central project name -->
	<privateProjectPattern>Developer Streams</privateProjectPattern>

	<!-- Name pattern for Local Analysis developers triage store.
		%s will be replaced with current user.
		You can set it just plain string like "Default Triage Store" to share all data
		or to user-dependent string like "%s-dev-triage-store" to make every user have its own triage store. -->
	<triageStorePattern>Default Triage Store</triageStorePattern>

        <!-- Number of workers for analysis run.  The number of workers will default to the
		minimum of the value below or the number of cores available on a machine.  When
		setting value to more than 1, make sure that your license allows parallel
		analysis. -->
	<workersNumber>1</workersNumber>

        <!-- Whether all referenced projects should be included in analysis -->
	<!--analyzeDependencies>true</analyzeDependencies-->

	<!-- analysis settings for C/C++ -->
	<analysisSettings language="cpp">
		<!-- cov-build command line options, for example "-g" -->
		<!-- Example: <buildOptions>-g</buildOptions> -->
		<buildOptions></buildOptions>
		
		<!-- cov-analyze* command line options, for example "-tp translation_unit_pattern" 
			to limit scope of analysis with specified TU pattern -->
		<!-- Example: <analysisOptions>-tp translation_unit_pattern</analysisOptions> -->
		<analysisOptions></analysisOptions>
                
		<!-- command that will be invoked after cov-build command.
    		   The following dynamic variables are allowed:
			${cov-sa-bin} - will be replaced by Static Analysis binary folder path
			${cov-inter-dir} - will be replaced by intermediate directory location of this analysis 
		-->
		<postBuild></postBuild>

		<!-- command that will be invoked after cov-analyze* command.
    		   The following dynamic variables are allowed:
			${cov-sa-bin} - will be replaced by Static Analysis binary folder path
			${cov-inter-dir} - will be replaced by intermediate directory location of this analysis 
		-->
		<postAnalyze></postAnalyze>

		<!-- command that will be invoked after cov-commit-defects command.
    		   The following dynamic variables are allowed:
			${cov-sa-bin} - will be replaced by Static Analysis binary folder path
			${cov-inter-dir} - will be replaced by intermediate directory location of this analysis 
			${cov-im-user}, ${cov-im-password}, ${cov-im-host}, ${cov-im-port} will be replaced by appropriate 
				Integrity Manager connection settings
			${cov-im-stream} - stream name, that contains local analysis results
		-->
		<postCommit></postCommit>

		<!-- checkers inside are used to override CIC default settings, there's no need to specify them all -->
		<checkers>
			<checker>
				<name>FORWARD_NULL</name>
				<enablement>DEFAULT</enablement> <!-- use DEFAULT or OPTIONAL to enable/disable checker by default -->

				<!-- checker options for analysis -->
				<options>
					<!-- specify an option for this checker -->
					<option>
						<name></name>
						<value></value>
					</option>
				</options>
			</checker>

			<!-- use the following element to label one or more checkers with a tag,
				making them easily selectable in Analysis Options -->
			<!--tag name="important">
				<checker-ref name="RESOURCE_LEAK"/>
				<checker-ref name="USE_AFTER_FREE"/>
			</tag-->

			<!-- the following tag can be used to enable/disable multiple checkers at once 
				"locked" attribute can be used to disable selecting/deselecting checkers in UI.
			-->
			<!--checkersEnabled value="true" locked="false">
				<tag name="important"/>
				<checker-ref name="*"/>
			</checkersEnabled-->

		</checkers>
		<!-- this tag can be set to enable/disable the call to delete Translation Units
		     that are outside of the analysis scope at the start of an analysis. -->		     
		<!--deleteTUsOutsideAnalysisScope>
		    true
		</deleteTUsOutsideAnalysisScope-->
		 
	</analysisSettings>

	<!-- specific analysis settings for Java analysis in same XML format as above -->
	<analysisSettings language="java">
		<!-- the following snippet can be used to disable FindBugs -->
		<!--checkers>
			<checker>
				<name>FindBugs</name>
				<enablement>OPTIONAL</enablement>
			</checker>
		</checkers-->
	</analysisSettings>

	<!-- specific analysis settings for C# analysis in same XML format as above -->
	<analysisSettings language="cs">
	</analysisSettings>

        <!-- this tag can be used to enable/disable Microsoft Code Analysis -->
        <!--MicrosoftCodeAnalysis>true</MicrosoftCodeAnalysis-->
</desktopSettings>
